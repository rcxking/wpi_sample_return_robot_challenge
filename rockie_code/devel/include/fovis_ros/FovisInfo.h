/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /home/will/Code/wpi-sample-return-robot-challenge/rockie_code/src/fovis_ros/msg/FovisInfo.msg
 *
 */


#ifndef FOVIS_ROS_MESSAGE_FOVISINFO_H
#define FOVIS_ROS_MESSAGE_FOVISINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace fovis_ros
{
template <class ContainerAllocator>
struct FovisInfo_
{
  typedef FovisInfo_<ContainerAllocator> Type;

  FovisInfo_()
    : header()
    , change_reference_frame(false)
    , fast_threshold(0)
    , num_total_detected_keypoints(0)
    , num_detected_keypoints()
    , num_total_keypoints(0)
    , num_keypoints()
    , motion_estimate_status_code(0)
    , motion_estimate_status()
    , motion_estimate_valid(false)
    , num_matches(0)
    , num_inliers(0)
    , num_reprojection_failures(0)
    , runtime(0.0)  {
    }
  FovisInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , change_reference_frame(false)
    , fast_threshold(0)
    , num_total_detected_keypoints(0)
    , num_detected_keypoints(_alloc)
    , num_total_keypoints(0)
    , num_keypoints(_alloc)
    , motion_estimate_status_code(0)
    , motion_estimate_status(_alloc)
    , motion_estimate_valid(false)
    , num_matches(0)
    , num_inliers(0)
    , num_reprojection_failures(0)
    , runtime(0.0)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _change_reference_frame_type;
  _change_reference_frame_type change_reference_frame;

   typedef int32_t _fast_threshold_type;
  _fast_threshold_type fast_threshold;

   typedef int32_t _num_total_detected_keypoints_type;
  _num_total_detected_keypoints_type num_total_detected_keypoints;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _num_detected_keypoints_type;
  _num_detected_keypoints_type num_detected_keypoints;

   typedef int32_t _num_total_keypoints_type;
  _num_total_keypoints_type num_total_keypoints;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _num_keypoints_type;
  _num_keypoints_type num_keypoints;

   typedef int32_t _motion_estimate_status_code_type;
  _motion_estimate_status_code_type motion_estimate_status_code;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _motion_estimate_status_type;
  _motion_estimate_status_type motion_estimate_status;

   typedef uint8_t _motion_estimate_valid_type;
  _motion_estimate_valid_type motion_estimate_valid;

   typedef int32_t _num_matches_type;
  _num_matches_type num_matches;

   typedef int32_t _num_inliers_type;
  _num_inliers_type num_inliers;

   typedef int32_t _num_reprojection_failures_type;
  _num_reprojection_failures_type num_reprojection_failures;

   typedef double _runtime_type;
  _runtime_type runtime;




  typedef boost::shared_ptr< ::fovis_ros::FovisInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fovis_ros::FovisInfo_<ContainerAllocator> const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;

}; // struct FovisInfo_

typedef ::fovis_ros::FovisInfo_<std::allocator<void> > FovisInfo;

typedef boost::shared_ptr< ::fovis_ros::FovisInfo > FovisInfoPtr;
typedef boost::shared_ptr< ::fovis_ros::FovisInfo const> FovisInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fovis_ros::FovisInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fovis_ros::FovisInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace fovis_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'fovis_ros': ['/home/will/Code/wpi-sample-return-robot-challenge/rockie_code/src/fovis_ros/msg'], 'std_msgs': ['/opt/ros/hydro/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::fovis_ros::FovisInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fovis_ros::FovisInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fovis_ros::FovisInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fovis_ros::FovisInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fovis_ros::FovisInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fovis_ros::FovisInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fovis_ros::FovisInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2e964f4d41f3876e14c50795334bf34c";
  }

  static const char* value(const ::fovis_ros::FovisInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2e964f4d41f3876eULL;
  static const uint64_t static_value2 = 0x14c50795334bf34cULL;
};

template<class ContainerAllocator>
struct DataType< ::fovis_ros::FovisInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fovis_ros/FovisInfo";
  }

  static const char* value(const ::fovis_ros::FovisInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fovis_ros::FovisInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Internal information on the\n\
# fovis algorithm parameters\n\
# and results\n\
\n\
Header header\n\
\n\
# True if in the next run the reference \n\
# frame will be changed. This is the case\n\
# when the number of inliers drops below\n\
# a threshold or the previous motion estimate\n\
# failed in last motion estimation.\n\
bool change_reference_frame\n\
\n\
# The threshold that is currently \n\
# used for the FAST feature detector.\n\
int32 fast_threshold\n\
\n\
# total number of detected keypoints in raw image\n\
int32 num_total_detected_keypoints\n\
\n\
# same as above per pyramid level, starting at 0\n\
int32[] num_detected_keypoints\n\
\n\
# total number of keypoints after bucketing and\n\
# edge and depth filter\n\
int32 num_total_keypoints\n\
\n\
# same as above per pyramid level, starting at 0\n\
int32[] num_keypoints\n\
\n\
# info from motion estimator\n\
int32 motion_estimate_status_code\n\
string motion_estimate_status\n\
bool motion_estimate_valid\n\
int32 num_matches\n\
int32 num_inliers\n\
int32 num_reprojection_failures\n\
\n\
# runtime of last iteration in seconds\n\
float64 runtime\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::fovis_ros::FovisInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fovis_ros::FovisInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.change_reference_frame);
      stream.next(m.fast_threshold);
      stream.next(m.num_total_detected_keypoints);
      stream.next(m.num_detected_keypoints);
      stream.next(m.num_total_keypoints);
      stream.next(m.num_keypoints);
      stream.next(m.motion_estimate_status_code);
      stream.next(m.motion_estimate_status);
      stream.next(m.motion_estimate_valid);
      stream.next(m.num_matches);
      stream.next(m.num_inliers);
      stream.next(m.num_reprojection_failures);
      stream.next(m.runtime);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct FovisInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fovis_ros::FovisInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fovis_ros::FovisInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "change_reference_frame: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.change_reference_frame);
    s << indent << "fast_threshold: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fast_threshold);
    s << indent << "num_total_detected_keypoints: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_total_detected_keypoints);
    s << indent << "num_detected_keypoints[]" << std::endl;
    for (size_t i = 0; i < v.num_detected_keypoints.size(); ++i)
    {
      s << indent << "  num_detected_keypoints[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.num_detected_keypoints[i]);
    }
    s << indent << "num_total_keypoints: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_total_keypoints);
    s << indent << "num_keypoints[]" << std::endl;
    for (size_t i = 0; i < v.num_keypoints.size(); ++i)
    {
      s << indent << "  num_keypoints[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.num_keypoints[i]);
    }
    s << indent << "motion_estimate_status_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motion_estimate_status_code);
    s << indent << "motion_estimate_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.motion_estimate_status);
    s << indent << "motion_estimate_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motion_estimate_valid);
    s << indent << "num_matches: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_matches);
    s << indent << "num_inliers: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_inliers);
    s << indent << "num_reprojection_failures: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_reprojection_failures);
    s << indent << "runtime: ";
    Printer<double>::stream(s, indent + "  ", v.runtime);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FOVIS_ROS_MESSAGE_FOVISINFO_H
